/*
Q : https://leetcode.com/problems/minimize-malware-spread/
TC : O(N^2)
SC : O(N)
*/
class Solution {
    
    static class Pair {
        int first, second;
        Pair(int a, int b) {
            first = a;
            second = b;
        }
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DSU dsu = new DSU(n);
        HashMap<Integer, Pair> nodeMap = new HashMap<>();
        
        for (int i = 0; i < n; i++) {
          dsu.makeSet(i);  
        }
        
        for (int i=0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                   dsu.unionSet(i, j); 
                }
            }
        }
        
        int ans = Integer.MAX_VALUE, maxSize = 0;
        
        for (int node : initial) {
            int parent = dsu.findSet(node);
            if (nodeMap.containsKey(parent)) {
                int prev = nodeMap.get(parent).first;
                nodeMap.put(parent, new Pair(Math.min(prev, node), 0));
            } else {
                nodeMap.put(parent, new Pair(node, dsu.getSize(parent)));
            }
            
        }
        
        for (int node : initial) {
            int parent = dsu.findSet(node);
            
            if (nodeMap.get(parent).second > maxSize) {
                ans = nodeMap.get(parent).first;
                maxSize = nodeMap.get(parent).second;
            } else if (nodeMap.get(parent).second == maxSize) {
                ans = Math.min(ans, nodeMap.get(parent).first);
            }
        }
        
        return ans;
        
        
    }
    
    static class DSU {
        int[] parent;
        int[] size;
        
        public DSU (int v) {
            parent = new int[v];
            size = new int[v];
        }
        
        void makeSet(int v) {
            parent[v] = v;
            size[v] = 1;
        }
        
        int findSet(int v) {
           if (v == parent[v]) {
               return v;
           }
            return parent[v] = findSet(parent[v]);
        }
        
        void unionSet(int v1, int v2) {
            int par1 = findSet(v1);
            int par2 = findSet(v2);
            
            if (size[par1] < size[par2]) {
                int temp = par1;
                par1 = par2;
                par2 = temp;
            }
            
            parent[par2] = par1;
            size[par1] += size[par2];
        }
        
        int getSize(int node) {
            return size[findSet(node)];
        }
    }
}
